#!/usr/bin/env python3

import argparse
from sys import platform
from os import getcwd, system, listdir, popen
from os.path import split, exists, isfile, join
from shutil import copy


class Color:
    blue = "\033[34m"
    green = "\033[32m"
    red = "\033[31m"
    yellow = "\033[33m"
    clear = "\033[0m"


print(
    Color.blue
    + r"""
| |_ ___ ___ 
| __/ __/ __|
| || (__\__ \
 \__\___|___/""".strip()
    + Color.clear
)


parser = argparse.ArgumentParser(description="tcs argument parser")
parser.add_argument("--package", help="create zip", dest="package", action="store_true")
args = parser.parse_args()
files = sorted(listdir("."))

current_folder = split(getcwd())[-1]

homework = -1
if current_folder.startswith("hw") and current_folder[2:].isdigit():
    homework = int(current_folder[2:])
    print(
        Color.green
        + f"Detected homework number {homework} from current folder"
        + Color.clear
    )
    print("Press enter to confirm or a number to change it")
    x = input()
    if x:
        homework = int(x)
else:
    print("Couldn't detect homework nubmer from current folder")
    print("Please enter the homework number")
    homework = int(input())

if args.package:
    print("Packaging zip")

    # Always copy parent's student.txt to stay updated
    current_directory_student_file = join(".", "student.txt")
    student_file = join("..", "student.txt")
    if not exists(student_file) and not exists(current_directory_student_file):
        print("Couldn't find student.txt file.")
        exit(-1)
    copy(student_file, current_directory_student_file)
    print(
        Color.green
        + "Automatically copying "
        + Color.blue
        + "student.txt"
        + Color.green
        + " from parent directory"
        + Color.clear
    )

    files_in_zip = [f + " " for f in files if f.startswith(f"hw{homework}q") and f.endswith(".c")] + [
        current_directory_student_file
    ]

    if platform == "linux" or platform == "linux2" or platform == "darwin":
        zip_file = f"hw{homework}.zip"
        command = f"zip {zip_file} " + "".join(files_in_zip)
        print("Running " + Color.yellow + command + Color.clear)
        if system(f"zip {zip_file} " + "".join(files_in_zip)) == 0:
            print(
                Color.green
                + f"Successfully packaged! You may verify and submit {zip_file}"
                + Color.clear
            )
        else:
            print(Color.red + "Packaging failed." + Color.clear)
            exit(-1)
    else:
        print(Color.red + "This platform doesn't have packaging support yet" + Color.clear)
        exit(-1)
    exit(0)

result = Color.green + "Hurray! Everything worked. Give yourself a pat on the back." + Color.clear
error_result = Color.red + "Fixes are required." + Color.clear
unknown_error_result = Color.red + "An error occurred" + Color.clear

options = [(f.split(".")[0].split("q")[1]) for f in files if f.startswith(f"hw{homework}q") and f.endswith(".c")]
if len(options) == 0:
    print(Color.red + f"No files matching hw{homework}q*.c found" + Color.clear)
    result = unknown_error_result
else:
    questions = "questions" if len(options) > 1 else "question"
    print(Color.green + f"Found {questions} " + ", ".join(map(str, options)) + Color.clear)
    print("Press enter to check all or space-separated questions e.g. '1 3'")
    x = input()
    if x:
        options = [int(i) for i in x.split(" ")]

for question in options:
    filename = f"hw{homework}q{question}"
    print("\n" + Color.blue + "Running question " + filename.split(".")[0].split("q")[1])
    source_file = filename + ".c"
    executable_file = filename + ".out"
    if not exists(source_file):
        print(Color.red + "Couldn't find source file " + source_file + Color.clear)
        exit(-1)

    if system(f"clang-format -i {source_file}") != 0:
        print(Color.red + "Warning: formatting was unsuccessful" + Color.clear)
    else:
        print(Color.green + "Formatted" + Color.clear)

    if system(f"clang -std=c99 {source_file} -o {executable_file}") != 0:
        print(Color.red + "Warning: compilation was unsuccessful" + Color.clear)
    else:
        print(Color.green + "Compiled" + Color.clear)

    for f in files:
        if not isfile(f):
            continue
        if f.startswith(filename + "in"):
            test_number = f.split(".")[0][len(filename) + 2 :]
            expected_output = f"{filename}out{test_number}.txt"
            if test_number.isdigit() and exists(expected_output):
                print(Color.blue + f"\nRunning test {test_number}" + Color.clear)
                command = join(".", executable_file) + f" < {f}"
                actual_output_file = f"{filename}actual{test_number}.txt"
                system(command + f" > {actual_output_file}")

                if platform == "linux" or platform == "linux2" or platform == "darwin":
                    diff_result = popen(
                        f"diff --strip-trailing-cr {actual_output_file} {expected_output}"
                    ).read()
                    if diff_result == "":
                        print(Color.green + "Test passed!" + Color.clear)
                    else:
                        print(Color.red + "Test failed. Difference:")
                        print(diff_result + Color.clear)
                        result = error_result
                else:
                    print(Color.red + "This platform does not support testing yet" + Color.clear)
    print()

print(result)