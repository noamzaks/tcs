#!/usr/bin/env python3

import argparse
from sys import platform
from os import getcwd, system, listdir, popen
from os.path import split, exists, isfile, join
from shutil import copy
from getpass import getpass

class Color:
    blue = "\033[34m"
    green = "\033[32m"
    red = "\033[31m"
    yellow = "\033[33m"
    clear = "\033[0m"


print(
    Color.blue
    + r"""
| |_ ___ ___ 
| __/ __/ __|
| || (__\__ \
 \__\___|___/""".strip()
    + Color.clear
)


parser = argparse.ArgumentParser(description="tcs argument parser")
parser.add_argument("--package", help="create zip", dest="package", action="store_true")
parser.add_argument("--self-test-website", help="use the online tester at https://cs23411440hw.cs.technion.ac.il", dest="test_website", action="store_true")
args = parser.parse_args()

print(Color.green + "Mode:" + Color.clear, end=" ")
if args.package:
    print("Packaging zip")
elif args.test_website:
    print("Deploy to self testing website")
else:
    print("Manual formatting & testing")
print()

files = sorted(listdir("."))

current_folder = split(getcwd())[-1]

homework = -1
if current_folder.startswith("hw") and current_folder[2:].isdigit():
    homework = int(current_folder[2:])
    print(
        Color.green
        + f"Detected homework number {homework} from current folder"
        + Color.clear
    )
    print("Press enter to confirm or a number to change it")
    x = input()
    if x:
        homework = int(x)
else:
    print("Couldn't detect homework nubmer from current folder")
    print("Please enter the homework number")
    homework = int(input())

if args.package:
    print("Packaging zip")

    # Always copy parent's student.txt to stay updated
    current_directory_student_file = join(".", "student.txt")
    student_file = join("..", "student.txt")
    if not exists(student_file) and not exists(current_directory_student_file):
        print("Couldn't find student.txt file.")
        exit(-1)
    copy(student_file, current_directory_student_file)
    print(
        Color.green
        + "Automatically copying "
        + Color.blue
        + "student.txt"
        + Color.green
        + " from parent directory"
        + Color.clear
    )

    files_in_zip = [
        f for f in files if f.startswith(f"hw{homework}q") and f.endswith(".c")
    ] + [current_directory_student_file]

    zip_file = f"hw{homework}.zip"
    command = ""
    if platform == "linux" or platform == "linux2" or platform == "darwin":
        command = f"zip {zip_file} " + " ".join(files_in_zip)
    elif platform == "win32":
        powershell_command = "Compress-Archive -Path " + " ".join(files_in_zip) + f" -DestinationPath {zip_file}"
        command = f'powershell -c "{powershell_command}"'
    else:
        print(
            Color.red + "This platform doesn't have packaging support yet" + Color.clear
        )
        exit(-1)

    print("Running " + Color.yellow + command + Color.clear)
    if system(command) == 0:
        print(
            Color.green
            + f"Successfully packaged! You may verify and submit {zip_file}"
            + Color.clear
        )
    else:
        print(Color.red + "Packaging failed." + Color.clear)
        exit(-1)
    exit(0)

result = (
    Color.green
    + "Hurray! Everything worked. Give yourself a pat on the back."
    + Color.clear
)
error_result = Color.red + "Fixes are required." + Color.clear
unknown_error_result = Color.red + "An error occurred" + Color.clear

options = [
    (f.split(".")[0].split("q")[1])
    for f in files
    if f.startswith(f"hw{homework}q") and f.endswith(".c")
]
if len(options) == 0:
    print(Color.red + f"No files matching hw{homework}q*.c found" + Color.clear)
    result = unknown_error_result
else:
    questions = "questions" if len(options) > 1 else "question"
    print(
        Color.green + f"Found {questions} " + ", ".join(map(str, options)) + Color.clear
    )
    print("Press enter to check all or space-separated questions e.g. '1 3'")
    x = input()
    if x:
        options = [int(i) for i in x.split(" ")]

if args.test_website:
    try:
        from selenium.webdriver import Chrome
        from selenium.webdriver.support.ui import Select

        driver = Chrome()
        driver.get("https://cs23411440hw.cs.technion.ac.il")
        
        print("Please enter your technion username (without @campus.technion.ac.il or @technion.ac.il)")
        print("Press enter if you signed in on the website")
        username = input()
        if not username == "":
            print("Please enter your technion password")
            password = getpass()
            
            driver.find_element_by_id("username").send_keys(username)
            driver.find_element_by_id("password").send_keys(password)
            driver.find_element_by_id("submit").click()

        driver.find_element_by_id("ID").send_keys("12345678")
        Select(driver.find_element_by_id("Hwn")).select_by_value(str(homework))
        Select(driver.find_element_by_id("Ques")).select_by_value(str(options[0]))
        driver.find_element_by_id("hw").send_keys(join(getcwd(), f"hw{homework}q{options[0]}.c"))
        driver.find_element_by_id("submit").click()

        for tr in driver.find_element_by_css_selector("tbody").find_elements_by_xpath(".//tr")[1:]:
            text = tr.text
            if "עבר" in text:
                print(Color.green + "Test " + text.split(" ")[1] + " passed!" + Color.clear)
            else:
                print(Color.red + "Test " + text.split(" ")[1] + " failed." + Color.clear)

        driver.close()
        exit(0)
    except ModuleNotFoundError:
        print(Color.red + "Selenium must be installed to use this feature" + Color.clear)
        print("You can install it with `pip install selenium`")
        exit(-1)

for question in options:
    filename = f"hw{homework}q{question}"
    print(
        "\n" + Color.blue + "Running question " + filename.split(".")[0].split("q")[1]
    )
    source_file = filename + ".c"
    executable_file = filename + ".out"
    if not exists(source_file):
        print(Color.red + "Couldn't find source file " + source_file + Color.clear)
        exit(-1)

    if system(f"clang-format -i {source_file}") != 0:
        print(Color.red + "Warning: formatting was unsuccessful" + Color.clear)
    else:
        print(Color.green + "Formatted " + Color.clear + source_file)

    if system(f"clang -std=c99 {source_file} -o {executable_file}") != 0:
        print(Color.red + "Warning: compilation was unsuccessful" + Color.clear)
    else:
        print(Color.green + "Compiled " + Color.clear + source_file + " to " + executable_file)

    for f in files:
        if not isfile(f):
            continue
        if f.startswith(filename + "in"):
            test_number = f.split(".")[0][len(filename) + 2 :]
            expected_output = f"{filename}out{test_number}.txt"
            if test_number.isdigit() and exists(expected_output):
                print(Color.blue + f"\nRunning test {test_number}" + Color.clear)
                command = join(".", executable_file) + f" < {f}"
                actual_output_file = f"{filename}actual{test_number}.txt"
                system(command + f" > {actual_output_file}")

                diff_result = ""
                if platform == "linux" or platform == "linux2" or platform == "darwin":
                    diff_result = popen(
                        f"diff --strip-trailing-cr {actual_output_file} {expected_output}"
                    ).read()
                elif platform == "win32":
                    diff_result = popen(
                        f"fc {actual_output_file} {expected_output}"
                    ).read()
                else:
                    print(
                        Color.red
                        + "This platform does not support testing yet"
                        + Color.clear
                    )
                    exit(-1)
                if diff_result == "":
                    print(Color.green + "Test passed!" + Color.clear)
                else:
                    print(Color.red + "Test failed. Difference:")
                    print(diff_result + Color.clear)
                    result = error_result
    print()

print(result)